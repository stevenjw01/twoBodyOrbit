#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nml.h"
#include "OSQP.h"
#include "Gruven.h"
#include "nml_util.h"

// Define FILEPATH globally
#define FILEPATH "/projects/artemis/fn/swilli36/osqp_data_conversion/data/data_converted/converted_txt/"

// Function to initialize the osqp_in_vect structure
struct osqp_in osqp_nasa_unit_test_main(const char* test) {
    struct osqp_in osqp_in_vect;
    char file[100];

    // Making the path
    snprintf(file, sizeof(file), "%s%s/", FILEPATH, test);

    // P matrix
    strcat(file, "P.txt");
    osqp_in_vect.P = nml_mat_fromfile(file);

    // Reset path for next file
    snprintf(file, sizeof(file), "%s%s/", FILEPATH, test);
    strcat(file, "A.txt");
    osqp_in_vect.A = nml_mat_fromfile(file);

    snprintf(file, sizeof(file), "%s%s/", FILEPATH, test);
    strcat(file, "q.txt");
    osqp_in_vect.q = nml_mat_fromfile(file);

    snprintf(file, sizeof(file), "%s%s/", FILEPATH, test);
    strcat(file, "l.txt");
    osqp_in_vect.l = nml_mat_fromfile(file);

    snprintf(file, sizeof(file), "%s%s/", FILEPATH, test);
    strcat(file, "u.txt");
    osqp_in_vect.u = nml_mat_fromfile(file);

    osqp_in_vect.max_iters = 4000;
    osqp_in_vect.ruiz = 1;
    osqp_in_vect.rhos = 0.1;
    osqp_in_vect.adap = 1;

    return osqp_in_vect;
}

// Function to dynamically get the values of N and M for a given test
struct dimensions {
    int N;
    int M;
};

struct dimensions get_dimensions(const char *test) {
    struct dimensions dims = {0, 0};
    char sizeFile[100];
    snprintf(sizeFile, sizeof(sizeFile), "%s%s/P.txt", FILEPATH, test);

    FILE *qp_size = fopen(sizeFile, "r");
    if (qp_size == NULL) {
        fprintf(stderr, "\n Error reading P matrix reference file! \n");
        return dims;
    }

    fscanf(qp_size, "%d", &dims.N);
    fscanf(qp_size, "%d", &dims.M);

    fclose(qp_size);

    return dims;
}

extern "C" {
    struct osqp_in osqp_nasa_unit_test_main(const char* test);
    struct dimensions get_dimensions(const char *test);
}
